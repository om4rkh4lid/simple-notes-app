package com.example.mynote;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProvider;


import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.EditText;
import android.widget.Toast;

import com.example.mynote.Data.Note;
import com.example.mynote.Data.NoteRepository;
import com.example.mynote.Utilities.DateTime;
import com.example.mynote.Utilities.EditNoteViewModel;
import com.example.mynote.Utilities.EditNoteViewModelFactory;

public class EditNoteActivity extends AppCompatActivity {

    Toast toast;
    Intent mIntentThatStartedThis;
    EditText mTitleEditText, mTextEditText;
    int mNoteID;
    EditNoteViewModel mViewModel;
    Note mCurrentNote;

    private final String EXISTING_NOTE_ID_FLAG = "existing";
    private final String NEW_NOTE_ID_FLAG = "new";
    private final int NEW_NOTE_ID = 0;
    private boolean isNew;

    //for restoring instance state
    private final String SIS_TITLE = "title";
    private final String SIS_TEXT = "text";



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //set layout xml
        setContentView(R.layout.activity_edit_note);

        //enable navigation to the parent by <- arrow
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        //get references to the views
        initViews();

        //if the activity is started from a savedInstanceState
        if (savedInstanceState != null){
            if(savedInstanceState.containsKey(EXISTING_NOTE_ID_FLAG)){
                mNoteID = savedInstanceState.getInt(EXISTING_NOTE_ID_FLAG);
            }else if(savedInstanceState.containsKey(NEW_NOTE_ID_FLAG)){
                isNew = true;
                mCurrentNote = new Note();
                mCurrentNote.setTitle(savedInstanceState.getString(SIS_TITLE));
                mCurrentNote.setText(savedInstanceState.getString(SIS_TEXT));
                mNoteID = NEW_NOTE_ID;
                populateUI(mCurrentNote);

            }

        }


        //get the intent that started this activity
        mIntentThatStartedThis = getIntent();

        //check if the intent that started this activity has an ID attached to it (existing note)
        //or o.w. (new note)
        //the intent could be null if the activity is started from a savedInstance state
        if(mIntentThatStartedThis != null) {
            if (mIntentThatStartedThis.hasExtra(EXISTING_NOTE_ID_FLAG)) {

                //make the title of the activity show Edit Note instead of New Note
                setTitle(R.string.edit_note_title);

                //get the ID of the note that was clicked
                mNoteID = mIntentThatStartedThis.getIntExtra(EXISTING_NOTE_ID_FLAG, 1);

            } else if (mIntentThatStartedThis.hasExtra(NEW_NOTE_ID_FLAG)) {

                //make the title of the activity show Edit Note instead of New Note
                setTitle(R.string.new_note_title);

                //set the id to 0 because this value is used with autogenerated fields
                mNoteID = NEW_NOTE_ID;

                //set the isNew flag to true
                isNew = true;
            }
        }
        //create an instance of the ViewModel factory
        EditNoteViewModelFactory factory = new EditNoteViewModelFactory(
                NoteRepository.getInstance(getApplication()),
                mNoteID);

        //create an instance of the ViewModel
        mViewModel = new ViewModelProvider(this, factory).get(EditNoteViewModel.class);

        //if it's an existing note
        if(!isNew) {
            mViewModel.getCurrentNote().observe(this, new Observer<Note>() {
                @Override
                public void onChanged(Note note) {
                    //this prevents OnChanged from being called on a null object when it's deleted
                    //since the delete occurs before the activity is destroyed and therefore onChanged is called
                    mViewModel.getCurrentNote().removeObserver(this);
                    mCurrentNote = note;
                    populateUI(mCurrentNote);
                }
            });
        }else{
            //hasn't been initialised as part of the savedInstanceState
            if(mCurrentNote == null) {
                mCurrentNote = new Note();
            }
        }

    }

    void initViews(){
        //references to input fields
        mTitleEditText = findViewById(R.id.et_new_note_title);
        mTextEditText = findViewById(R.id.et_new_note_body);
    }


    void populateUI(Note note){
        mTitleEditText.setText(note.getTitle());
        mTextEditText.setText(note.getText());
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.edit_note_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }

    public void onSaveClicked(MenuItem item){
        if(toast != null)
            toast.cancel();
        toast = Toast.makeText(this, R.string.saved_note, Toast.LENGTH_SHORT);
        toast.show();

        if(isNew) {
            if(prepNoteForSave(NEW_NOTE_ID)){
                mViewModel.saveNewNote(mCurrentNote);
            }
        }else{
            if(prepNoteForSave(mNoteID)) {
                mViewModel.updateNote(mCurrentNote);
            }else{
                mViewModel.deleteNote(mCurrentNote);
            }
        }

        finish();
    }


    boolean prepNoteForSave(int id){
        //prepare data for saving to database
        String title, timestamp, text;
        boolean isTitleEmpty, isBodyEmpty;

        //check the title is not empty
        if (TextUtils.isEmpty(mTitleEditText.getText().toString())) {
            isTitleEmpty = true;
            title = getString(R.string.untitled);
        } else {
            isTitleEmpty = false;
            title = mTitleEditText.getText().toString();
        }

        //check the text is not empty
        if (TextUtils.isEmpty(mTextEditText.getText().toString())) {
            isBodyEmpty = true;
            text = "";
        } else {
            isBodyEmpty = false;
            text = mTextEditText.getText().toString();
        }

        //if there is a note body or a title or both
        if(!isBodyEmpty || !isTitleEmpty){
            mCurrentNote.setId(id);
            mCurrentNote.setTitle(title);

            //to be changed
            mCurrentNote.setTimeStamp(DateTime.getDateTimeSortable());
            mCurrentNote.setText(text);

            //there is something to be saved
            return true;
        }
        //there is neither a title nor a body
        else{
            return false;
        }
    }

    public void onDiscardClicked(MenuItem item){
        if(toast != null)
            toast.cancel();
        toast = Toast.makeText(this.getApplicationContext(), R.string.note_discarded, Toast.LENGTH_SHORT);
        toast.show();

        finish();
    }


    @Override
    protected void onSaveInstanceState(@NonNull Bundle outState) {
        if(isNew){

            //check if text is empty
            if(TextUtils.isEmpty(mTextEditText.getText().toString())){
                outState.putString(SIS_TEXT, "");
            }else{
                outState.putString(SIS_TEXT, mTextEditText.getText().toString());
            }

            //check if title is empty
            if(TextUtils.isEmpty(mTextEditText.getText().toString())){
                outState.putString(SIS_TITLE, "");
            }else{
                outState.putString(SIS_TITLE, mTextEditText.getText().toString());
            }

        }
        else{
            outState.putInt(EXISTING_NOTE_ID_FLAG, mNoteID);
        }

        super.onSaveInstanceState(outState);
    }
}
